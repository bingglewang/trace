<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zsl.traceapi.dao.ZslTraceSubcodeDao">
    <resultMap id="BaseResultMap" type="com.zsl.tracedb.model.ZslTraceSubcode">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="trace_index" jdbcType="BIGINT" property="traceIndex" />
        <result column="trace_code_number" jdbcType="VARCHAR" property="traceCodeNumber" />
        <result column="trace_sub_code_number" jdbcType="VARCHAR" property="traceSubCodeNumber" />
        <result column="trace_good_id" jdbcType="INTEGER" property="traceGoodId" />
        <result column="trace_stall_id" jdbcType="INTEGER" property="traceStallId" />
        <result column="parent_id" jdbcType="BIGINT" property="parentId" />
        <result column="is_leaf" jdbcType="CHAR" property="isLeaf" />
        <result column="node_level" jdbcType="INTEGER" property="nodeLevel" />
        <result column="scan_count" jdbcType="BIGINT" property="scanCount" />
    </resultMap>

    <resultMap id="PointResultMap" type="com.zsl.tracedb.model.ZslTracePoint">
        <id column="trace_point_id" jdbcType="INTEGER" property="tracePointId" />
        <result column="trace_goods_id" jdbcType="INTEGER" property="traceGoodsId" />
        <result column="trace_point_name" jdbcType="VARCHAR" property="tracePointName" />
        <result column="trace_point_to_number" jdbcType="INTEGER" property="tracePointToNumber" />
        <result column="trace_point_from_number" jdbcType="INTEGER" property="tracePointFromNumber" />
        <result column="trace_parent_id" jdbcType="INTEGER" property="traceParentId" />
        <result column="trace_stall_id" jdbcType="INTEGER" property="traceStallId" />
        <result column="trace_code_number" jdbcType="VARCHAR" property="traceCodeNumber" />
        <result column="trace_point_time" jdbcType="TIMESTAMP" property="tracePointTime" />
    </resultMap>

    <resultMap id="BaseResultMapSub" type="com.zsl.traceapi.dto.ExcelTraceCode">
        <result column="trace_sub_code_number" jdbcType="VARCHAR" property="code" />
    </resultMap>

    <insert id="insertCodeBatch">
        insert into zsl_trace_subcode (trace_index, trace_code_number,trace_sub_code_number) values
        <foreach collection="list" item="item" separator="," index="index">
            (#{item.traceIndex,jdbcType=BIGINT},
            #{item.traceCodeNumber,jdbcType=VARCHAR},
            #{item.traceSubcodeNumber,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <insert id="insertCodeBatch1">
        insert into zsl_trace_subcode (trace_sub_code_number,is_leaf) values
        <foreach collection="list" item="item" separator="," index="index">
            (#{item.subCodeNumber,jdbcType=VARCHAR},
            #{item.isLeaf,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <update id="updateGoodsAndStall" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            UPDATE zsl_trace_subcode
            <set>
                trace_good_id=#{item.goodsId},
                trace_stall_id=#{item.stallId}
            </set>
            <where>
                id = #{item.id}
            </where>
        </foreach>
    </update>

    <update id="updateOutCodeBatch" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            UPDATE zsl_trace_subcode
            <set>
                parent_id = #{item.parentId}
            </set>
            <where>
                id = #{item.id}
            </where>
        </foreach>
    </update>

    <update id="updateOutCodeById" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            UPDATE zsl_trace_subcode
            <set>
                is_leaf = 'N',
                node_level = #{item.nodeLevel}
            </set>
            <where>
                id = #{item.id}
            </where>
        </foreach>
    </update>

    <select id="selectByCodeNumber" resultMap="BaseResultMap">
        SELECT *  FROM `zsl_trace_subcode` WHERE trace_code_number = #{traceCodeNumber} LIMIT 1;
    </select>

    <select id="selectByParenId" resultMap="BaseResultMap">
        SELECT * FROM `zsl_trace_subcode` where parent_id = #{parentId};
    </select>

    <update id="deleteCodeRelation">
        UPDATE zsl_trace_subcode
        <set>
            parent_id  = null
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <select id="selectBySubCode" resultMap="BaseResultMap">
        SELECT *  FROM `zsl_trace_subcode` WHERE trace_sub_code_number = #{traceSubCode} LIMIT 1;
    </select>

    <select id="selectById" resultMap="BaseResultMap">
        SELECT *  FROM `zsl_trace_subcode` WHERE id = #{id} LIMIT 1;
    </select>

    <select id="exportExcel" resultMap="BaseResultMapSub">
        SELECT trace_sub_code_number
        FROM `zsl_trace_subcode`
        where id BETWEEN
        (SELECT id from zsl_trace_subcode where trace_index = #{fromIndex} and trace_code_number = #{traceCodeNumber})
        and
        (SELECT id from zsl_trace_subcode where  trace_index = #{toIndex} and trace_code_number = #{traceCodeNumber})
    </select>

    <select id="selectByRange" resultType="java.lang.Long">
        SELECT id
        FROM `zsl_trace_subcode`
        where id BETWEEN
        (SELECT id from zsl_trace_subcode where trace_index = #{fromIndex} and trace_code_number = #{traceCodeNumber})
        and
        (SELECT id from zsl_trace_subcode where  trace_index = #{toIndex} and trace_code_number = #{traceCodeNumber})
    </select>

    <delete id="deleteByCodeNumber">
        delete from zsl_trace_subcode where trace_code_number=#{traceCodeNumber}
    </delete>

    <select id="goodsScanCount" resultType="java.lang.Long">
        SELECT count(id)
        FROM `zsl_trace_subcode`
        where (trace_index BETWEEN (select trace_from_number from zsl_trace_record where trace_good_id = #{goodsId}) and (select trace_to_number from zsl_trace_record where trace_good_id = #{goodsId}))
        and is_leaf = 'Y'
        and scan_count = 0;
    </select>

    <select id="goodsTotalCount" resultType="java.lang.Long">
        SELECT count(id)
        FROM `zsl_trace_subcode`
        where (trace_index BETWEEN (select trace_from_number from zsl_trace_record where trace_good_id = #{goodsId}) and (select trace_to_number from zsl_trace_record where trace_good_id = #{goodsId}))
        and is_leaf = 'Y'
    </select>

    <select id="selectTracePointNodes" resultMap="PointResultMap">
       select *
        from zsl_trace_point
         where (#{traceIndex} BETWEEN trace_point_from_number and trace_point_to_number)
        and trace_code_number = #{traceCodeNumber}
        and trace_goods_id = #{traceGoodsId}
        ORDER BY trace_point_time ASC
    </select>

    <select id="searchByIndexOrCode" resultMap="BaseResultMap">
        SELECT *
        FROM zsl_trace_subcode
        where
        trace_code_number = #{traceCodeNumber}
        and
        (id = #{traceIndexOrCode}+0
        or trace_sub_code_number = #{traceIndexOrCode}
        or id = (SELECT id from zsl_trace_subcode where trace_index = #{traceIndexOrCode}+0 and trace_code_number = #{traceCodeNumber})
        )
    </select>

    <select id="getSuCodeByPage" resultMap="BaseResultMap">
       SELECT *
       from zsl_trace_subcode
       where
       (
             id BETWEEN
            (SELECT id FROM `zsl_trace_subcode` where trace_index = #{fromNumber} and trace_code_number = #{traceCodeNumber})
            and
            (SELECT id FROM `zsl_trace_subcode` where trace_index = #{toNumber} and trace_code_number = #{traceCodeNumber})
        )
        and parent_id is null
        and trace_good_id is not null
        ORDER BY node_level desc
        LIMIT #{pageSize}
    </select>

    <select id="getTotalCount" resultType="java.lang.Long">
        SELECT count(id) from zsl_trace_subcode where (id BETWEEN
        (SELECT id FROM `zsl_trace_subcode` where trace_index = #{fromNumber} and trace_code_number = #{traceCodeNumber})
        and
        (SELECT id FROM `zsl_trace_subcode` where trace_index = #{toNumber} and trace_code_number = #{traceCodeNumber}))
        and parent_id is null
        and trace_good_id is not null
    </select>

</mapper>